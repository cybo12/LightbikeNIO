import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.rmi.RemoteException;

/**
 * @author Sam
 */
public class LightBikesTronGUI extends JFrame {

    static final long serialVersionUID = 201906281539L;
    //Inner representation of the grid
    public static int[][] iGrid = new int[100][100];
    final String gameName;
    //Objects to store the image and the 2D environment
    BufferedImage image;
    Graphics2D g2;
    myJPanel jpBoard;
    private JButton jButton1;
    private JLabel jLabel1;
    private JTextField jYourScore;
    private BikeWaitingRoomJoined bikeWaitingRoomJoined;
    private BikeUser bikeUser;
    private int alive = 1;
    private Communication com;
    // Creates new form GUI
    public LightBikesTronGUI(BikeUser bikeUser,String gameName, BikeWaitingRoomJoined bikeWaitingRoomJoined) {
        this.gameName = gameName;
        this.bikeUser = bikeUser;
        this.bikeWaitingRoomJoined = bikeWaitingRoomJoined;
        initComponents();

        /* GENERATED BY NETBEANS
         * Just copied here so as to change the JPanel and use my custom one (that includes an image)
         */
        image = new BufferedImage(400, 400, BufferedImage.TYPE_INT_ARGB);
        jpBoard = new myJPanel(true, image);

        jpBoard.setMinimumSize(new Dimension(400, 400));
        jpBoard.setPreferredSize(new Dimension(400, 400));

        GroupLayout jPanel1Layout = new GroupLayout(jpBoard);
        jpBoard.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 156, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 396, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(208, 208, 208)
                                                .addComponent(jButton1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jYourScore, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(jpBoard, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jYourScore, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addComponent(jpBoard, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addContainerGap())
        );

        pack();
        /* END GENERATED BY NETBEANS */

        //Resets everything
        newGrid();

        //Adds the keyboard listener
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());

        //Inits the image board (400x400, filled with black)
        g2 = jpBoard.image.createGraphics();
        g2.setColor(Color.BLACK);
        g2.fillRect(0, 0, 400, 400);

        //Makes it visible and repainted
        jpBoard.setVisible(true);
        jpBoard.repaint();

        //To force the GUI to refresh its frame
        this.repaint();
    }

    //Resets the inner representation of the grid
    public void newGrid() {
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < 100; j++) {
                iGrid[i][j] = 0;
            }
        }
    }

    //This is where we refresh the grid with the new one, given as argument
    public void refreshGrid(byte[] change) {
        IntBuffer intBuf =
                ByteBuffer.wrap(change)
                        .order(ByteOrder.BIG_ENDIAN)
                        .asIntBuffer();
        int[] array = new int[intBuf.remaining()];
        intBuf.get(array);
        int i = array[0];
        int j = array[1];
        iGrid[i][j] = array[2];

        //Apply the color corresponding to the given player
        //One tile = 4x4 px
        if (array[2] == 1) {
            g2.setColor(Color.RED);
            g2.fillRect(i * 4, j * 4, 4, 4);
        } else if (array[2] == 2) {
            g2.setColor(Color.BLUE);
            g2.fillRect(i * 4, j * 4, 4, 4);
        } else if (array[2] == 3) {
            g2.setColor(Color.YELLOW);
            g2.fillRect(i * 4, j * 4, 4, 4);
        } else if (array[2] == 4) {
            g2.setColor(Color.GREEN);
            g2.fillRect(i * 4, j * 4, 4, 4);
        }
        this.repaint();
    }

    public void startGameGrid(){
        //The play button has been pressed, we restard the game
        g2.setColor(Color.BLACK);
        g2.fillRect(0, 0, 400, 400);
        this.repaint();
        newGrid();
        System.out.println("Play pressed");
        bikeWaitingRoomJoined.exitWindow();
        jButton1.setEnabled(false);
    }




    //This method updates the frame
    public void update(byte[] change){
        //Updates the score
        bikeUser.getAlivePlayer();
        bikeUser.getScore();
        if(alive == 1) {
            jYourScore.setText(bikeUser.getScore() + "");// --- OK
        }
        //Refresh the image
        refreshGrid(change); // --- OK

    }
    private void formKeyPressed(KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        bikeUser.getAlivePlayer();
        // A key has been pressed. If a game is in progress, we must warn the core - in fact it's checking the player number
        if (alive == 1) {
            //System.out.println("I'm alive");
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_LEFT:
                    bikeUser.changeDirection('L'); // --- OK
                    //System.out.println("I'm alive L");
                    break;
                case KeyEvent.VK_RIGHT:
                    bikeUser.changeDirection('R'); // --- OK
                    //System.out.println("I'm alive R");
                    break;
                case KeyEvent.VK_UP:
                    bikeUser.changeDirection('U'); // --- OK
                    //System.out.println("I'm alive U");
                    break;
                case KeyEvent.VK_DOWN:
                    bikeUser.changeDirection('D'); // --- OK
                    //System.out.println("I'm alive D");
                    break;
                default:
                    break;
            }
        }
    }

    private void initComponents() {

        jButton1 = new JButton();
        jLabel1 = new JLabel();
        jYourScore = new JTextField();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
                    bikeUser.removeUser();
                    System.exit(0);
            }
        });
        addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                    formKeyPressed(evt);
                    System.out.println("I'm pressing");
            }
        });

        jButton1.setText("Go back to game-list");
        jButton1.addActionListener(evt -> jButton1ActionPerformed(evt));

        jLabel1.setText("Your Score");

        jYourScore.setText("0");
        jYourScore.setEnabled(false);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(208, 208, 208)
                                                .addComponent(jButton1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jYourScore, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(261, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jYourScore, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 454, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        bikeUser.createWaitingRoom();
        bikeUser.relaunchUpdateGameList();
        this.dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // When we press the red X to close the window, we warn the core thread that the program is closing.
        this.dispose();
    }//GEN-LAST:event_formWindowClosing


    public void ending(String username) {
        new Thread(()->JOptionPane.showMessageDialog(this, "GAME OVER\n" + username + " WINS!\nYour score : " + bikeUser.getScore())).start();
        jButton1.setEnabled(true);
        bikeWaitingRoomJoined.disposeWindow();

    }

    //Key listener
    private class MyDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
                //Detects when a key has been pressed
                    formKeyPressed(e);
            } else if (e.getID() == KeyEvent.KEY_RELEASED) {
                //just for testing, not very usefull
            } else if (e.getID() == KeyEvent.KEY_TYPED) {
                //Ibid
            }
            return false;
        }
    }
    // End of variables declaration//GEN-END:variables


    public void setAlive(byte alive) {
        this.alive = alive;
    }

}
